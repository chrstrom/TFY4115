# Implementation of Heun's method (RK2)
import numpy as np
import matplotlib.pyplot as plt
import eksternlab as exlab
from scipy.constants import g

# CONSTANTS
k = 0.005067267482262274
m = 0.0298

# Measure in 8 points
lane_data_x = [  0.0,   0.2,   0.4,   0.6,   0.8,   1.0,   1.2,   1.4]
lane_data_y = [0.472, 0.374, 0.313, 0.280, 0.284, 0.314, 0.373, 0.450]

lane_h = exlab.height(lane_data_x, lane_data_y)

def Heun(f, iv, h, N): # f = function,iv = initial value, h = step size, N = no. of points
    # Init arrays for t, x and alpha
    t = np.zeros(N)
    x = np.zeros(N)
    alpha = np.zeros(N)

     # Set IV
    x[0] = iv

    # Calculation
    for n in range(N-1):
        # increment t by h
        t[n+1] = t[n] + h

        # update alpha at current x
        alpha[n] = exlab.slope(lane_h, x[n])

        # calculate next x
        x_star = x[n] + h*fx(x[n], t[n], alpha[n])
        x[n+1] = x[n] + 0.5*h*( fx(x[n], t[n], alpha[n]) + fx(x_star, t[n], alpha[n]) )

    return alpha, x, t

def plotHeun(fv, fx, fn, v_0, s_0, h, N):
    # Set figure params and plot
    graph_params = {'figure.figsize': (16, 6), 'axes.grid': True,
                'lines.linewidth': 3, 'font.size': 14}
    plt.rcParams.update(graph_params)

    # plot v(t)
    alpha, v_Heun, t = Heun(fv, v_0, h, N)
    plt.title("RK2 numerical solution of v(t)")
    plt.plot(t,v_Heun)
    plt.ylabel('$v(t)$'), plt.xlabel('$t$')
    plt.show()

    # plot x(t)
    alpha, x_Heun, t = Heun(fx, x_0, h, N)
    plt.title("RK2 numerical solution of x(t)")
    plt.plot(t,x_Heun)
    plt.ylabel('$x(t)$'), plt.xlabel('$t$')
    plt.show()

    # plot N(t)
    alpha, n_Heun, t = Heun(fn, 0, h, N)
    plt.title("RK2 numerical solution of N(t)")
    plt.plot(t,n_Heun)
    plt.ylabel('$x(t)$'), plt.xlabel('$t$')
    plt.show()

    # Plot alpha
    plt.title("slope angle")
    plt.plot(t, alpha)
    plt.ylabel('$alpha$'), plt.xlabel('$t$')
    plt.show()

if __name__ == '__main__':
    # For a dependent simulation of one period, we need t = h * N, but we dont need to determine s(t)
    # For a T-independent simulation we need to determine s(t), either through numerical solution of ds/dt or explicit definition of s(t)

    h = 0.000137
    N = 10000
    x_0 = 0
    v_0 = 0
    
    # Function for dv(t)/dt
    fv = lambda v, t, alpha : (7*g*np.sin(alpha) - 7*k*v/m) / 5
    
    # Function for dx(t)/dt
    fx = lambda x, t, alpha : 1

    # Function for N(t)
    fn = lambda alpha : m*g*np.cos(alpha)

    # Plot solution v(t)
    plotHeun(fv, fx, fn, v_0, x_0, h, N)